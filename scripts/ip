#!/usr/bin/env bash
. "$(dirname "$0")/lib/init"

# TODO: Move this to a config file
TAILNET_NAME=wahoo-noodlefish

main() {
	name="$1"
	if [[ $name == "" ]]; then
		echo "Usage: ./scripts/ip <instance-name>"
		exit 1
	fi

	if publicIP=$(ip::find "$name"); then
		echo "$publicIP"
		return
	fi

	echo "Could not find IP for $name" >&2
	exit 1
}

# ip::find($1: instance_name?) -> public_ip?
ip::find() {
	local name
	name="$1"

	if [[ -z "$TAILNET_NAME" ]]; then
		echo "TAILNET_NAME is not set" >&2
		return 1
	fi

	if getent hosts "$name.$TAILNET_NAME.ts.net" > /dev/null; then
		echo "$name.$TAILNET_NAME.ts.net"
		return
	fi

	local awsIP
	awsIP=$(jq -r \
		--arg name "$name" \
		'.resources[] | select(.type == "aws_instance") | select(.name == $name) | .instances[].attributes.public_ip // empty' \
		./secrets/terraform.tfstate)
	if [[ "$awsIP" != "" ]]; then
		echo "$awsIP"
		return
	fi

	return 1
}

# ip::list() -> (name + " " + public_ip)[]
ip::list() {
	jq -r '
		.resources[] |
			select(.type == "aws_instance") |
			"\(.name) \(.instances[].attributes.public_ip // empty)"' \
		./secrets/terraform.tfstate
}

# ip::list_servers() -> name[]
ip::list_servers() {
	while read -r name _; do
		echo "$name"
	done <<< "$(ip::list)"
}

ip::autocomplete() {
	local cur="${COMP_WORDS[COMP_CWORD]}"
	COMPREPLY=( $(compgen -W "$(tfstate::public_ip)" -- ${cur}) )
}

if lib::is_main; then
	main "$@"
fi
